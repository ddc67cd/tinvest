{"config":{"lang":["ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"T-Invest pip install tinvest \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 OpenAPI \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438. \u0415\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0442\u0443\u0442 . pip install tinvest[cli] # \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f tinvest openapi --token TOKEN portfolio Performance pip install tinvest[uvloop] pip install tinvest[orjson] orjson uvloop \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0413\u0434\u0435 \u0432\u0437\u044f\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438? \u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u0432\u0430\u0448\u0435\u0433\u043e \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 tinkoff . \u0414\u0430\u043b\u0435\u0435: \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u0434\u0435\u043b\u043e\u043a \u043a\u043e\u0434\u043e\u043c\" \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0412\u044b\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \u0440\u0435\u0436\u0438\u043c\u0430 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b\" (sandbox) \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435, \u0442\u043e\u043a\u0435\u043d \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0433\u043e \u043f\u043e\u0437\u0436\u0435 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f tinvest invest-openapi \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0414\u043b\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 OpenAPI \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0430 streaming \u0438 rest. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f SDK \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0438\u0436\u0435 . \u0423 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u2014 \u0432 \u043d\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0432 Issues \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u043b\u0438\u0437\u0430\u0445 \u0432 Releases. \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 SDK, \u043d\u0430\u0448\u0451\u043b\u0441\u044f \u0431\u0430\u0433 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0432 Issues. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u043a\u0435\u0442\u043e\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0443\u0447\u0438\u0442\u044c OpenAPI \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 Streaming \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u041f\u0440\u0438 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u0431\u043e\u044f\u0445 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. import asyncio import tinvest as ti async def main (): async with ti . Streaming ( 'TOKEN' ) as streaming : await streaming . candle . subscribe ( 'BBG0013HGFT4' , ti . CandleResolution . min1 ) await streaming . orderbook . subscribe ( 'BBG0013HGFT4' , 5 ) await streaming . instrument_info . subscribe ( 'BBG0013HGFT4' ) async for event in streaming : print ( event ) asyncio . run ( main ()) \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 REST API Client \u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 requests . \u0421 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u044d\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 . import tinvest TOKEN = \"<TOKEN>\" client = tinvest . SyncClient ( TOKEN ) response = client . get_portfolio () # tinvest.PortfolioResponse print ( response . payload ) # Handle error ... client = tinvest . SyncClient ( TOKEN ) try : response = client . get_operations ( \"\" , \"\" ) except tinvest . BadRequestError as e : print ( e . response ) # tinvest.Error \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 REST API Client \u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp . \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u0430\u043a \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430. import asyncio import tinvest TOKEN = \"<TOKEN>\" async def main (): client = tinvest . AsyncClient ( TOKEN ) response = await client . get_portfolio () # tinvest.PortfolioResponse print ( response . payload ) await client . close () asyncio . run ( main ()) Sandbox Sandbox \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0442\u0440\u0430\u0442\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 Production \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c. client = tinvest . AsyncClient ( SANDBOX_TOKEN , use_sandbox = True ) # client = tinvest.SyncClient(SANDBOX_TOKEN, use_sandbox=True) Environments name required default TINVEST_TOKEN optional '' TINVEST_SANDBOX_TOKEN optional '' TINVEST_USE_ORJSON optional True TINVEST_USE_UVLOOP optional True Contributing \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0438 \u043f\u0443\u043b\u043b \u0440\u0435\u043a\u0432\u0435\u0441\u0442\u044b, \u043f\u0440\u043e\u0435\u043a\u0442 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#t-invest","text":"pip install tinvest \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 OpenAPI \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438. \u0415\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0442\u0443\u0442 . pip install tinvest[cli] # \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f tinvest openapi --token TOKEN portfolio Performance pip install tinvest[uvloop] pip install tinvest[orjson] orjson uvloop","title":"T-Invest"},{"location":"#_1","text":"","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u0432\u0430\u0448\u0435\u0433\u043e \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 tinkoff . \u0414\u0430\u043b\u0435\u0435: \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u0434\u0435\u043b\u043e\u043a \u043a\u043e\u0434\u043e\u043c\" \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0412\u044b\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \u0440\u0435\u0436\u0438\u043c\u0430 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b\" (sandbox) \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435, \u0442\u043e\u043a\u0435\u043d \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0433\u043e \u043f\u043e\u0437\u0436\u0435 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432","title":"\u0413\u0434\u0435 \u0432\u0437\u044f\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438?"},{"location":"#_3","text":"tinvest invest-openapi","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"},{"location":"#_4","text":"\u0414\u043b\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 OpenAPI \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0430 streaming \u0438 rest. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f SDK \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0438\u0436\u0435 .","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442"},{"location":"#_5","text":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u2014 \u0432 \u043d\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0432 Issues \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u043b\u0438\u0437\u0430\u0445 \u0432 Releases. \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 SDK, \u043d\u0430\u0448\u0451\u043b\u0441\u044f \u0431\u0430\u0433 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0432 Issues.","title":"\u0423 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441"},{"location":"#_6","text":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u043a\u0435\u0442\u043e\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0443\u0447\u0438\u0442\u044c OpenAPI \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"#streaming","text":"\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u041f\u0440\u0438 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u0431\u043e\u044f\u0445 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. import asyncio import tinvest as ti async def main (): async with ti . Streaming ( 'TOKEN' ) as streaming : await streaming . candle . subscribe ( 'BBG0013HGFT4' , ti . CandleResolution . min1 ) await streaming . orderbook . subscribe ( 'BBG0013HGFT4' , 5 ) await streaming . instrument_info . subscribe ( 'BBG0013HGFT4' ) async for event in streaming : print ( event ) asyncio . run ( main ())","title":"Streaming"},{"location":"#rest-api-client","text":"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 requests . \u0421 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u044d\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 . import tinvest TOKEN = \"<TOKEN>\" client = tinvest . SyncClient ( TOKEN ) response = client . get_portfolio () # tinvest.PortfolioResponse print ( response . payload ) # Handle error ... client = tinvest . SyncClient ( TOKEN ) try : response = client . get_operations ( \"\" , \"\" ) except tinvest . BadRequestError as e : print ( e . response ) # tinvest.Error","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 REST API Client"},{"location":"#rest-api-client_1","text":"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp . \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u0430\u043a \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430. import asyncio import tinvest TOKEN = \"<TOKEN>\" async def main (): client = tinvest . AsyncClient ( TOKEN ) response = await client . get_portfolio () # tinvest.PortfolioResponse print ( response . payload ) await client . close () asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 REST API Client"},{"location":"#sandbox","text":"Sandbox \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0442\u0440\u0430\u0442\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 Production \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c. client = tinvest . AsyncClient ( SANDBOX_TOKEN , use_sandbox = True ) # client = tinvest.SyncClient(SANDBOX_TOKEN, use_sandbox=True)","title":"Sandbox"},{"location":"#environments","text":"name required default TINVEST_TOKEN optional '' TINVEST_SANDBOX_TOKEN optional '' TINVEST_USE_ORJSON optional True TINVEST_USE_UVLOOP optional True","title":"Environments"},{"location":"#contributing","text":"\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0438 \u043f\u0443\u043b\u043b \u0440\u0435\u043a\u0432\u0435\u0441\u0442\u044b, \u043f\u0440\u043e\u0435\u043a\u0442 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c.","title":"Contributing"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v3.0.2 - 2021-02-22 Compare with v3.0.1 Added Add uvloop, orjson ( fd09056 by Danil Akhtarov). Add make instructions ( 259736f by Danil Akhtarov). Fixed Fix version ( b36f2a5 by Danil Akhtarov). v3.0.1 - 2020-12-23 Compare with v3.0.0 Fixed Fix closing a session #153 ( 99b309e by Danil Akhtarov). v3.0.0 - 2020-12-21 Compare with v2.3.3 Added Add customclient example ( 6405467 by Danil Akhtarov). v2.3.3 - 2020-11-18 Compare with v2.3.2 Fixed Fix typing ( bf10ada by Danil Akhtarov). v2.3.2 - 2020-11-18 Compare with v2.3.1 Added Add plotly pandas example ( c3adafe by Danil Akhtarov). Add changelog ( 792307f by Danil Akhtarov). Fixed Fix cli portfolio broker_account_id option ( 7265b8b by Danil Akhtarov). v2.3.1 - 2020-11-11 Compare with v2.3.0 Added Add brokeraccountid optional parameter to operationsapi ( 566dbcf by Danil Akhtarov). Fixed Fix ( 8d5eae9 by Danil Akhtarov). v2.3.0 - 2020-10-16 Compare with v2.2.0 Added Add cli docs ( c100621 by Danil Akhtarov). Fixed Fix ( 379c508 by Danil Akhtarov). v2.2.0 - 2020-10-04 Compare with v2.1.1 Added Add cli ( 04e1162 by Danil Akhtarov). Fixed Fix travis ( 3f1fa0b by Danil Akhtarov). v2.1.1 - 2020-09-22 Compare with v2.1.0 Added Add tests ( 8a4e5a6 by Danil Akhtarov). Fixed Fix types ( 149a317 by Danil Akhtarov). v2.1.0 - 2020-07-30 Compare with v2.0.0 Added Add tests ( e523c20 by Danil Akhtarov). Add super class for open api ( 7c07724 by Danil Akhtarov). Fixed Fix readme ( 9e0e0ac by Danil Akhtarov). v2.0.0 - 2020-07-10 Compare with v1.0.24 v1.0.24 - 2020-06-26 Compare with v1.0.23 Fixed Fix scripts ( 74de2ce by Danil Akhtarov). v1.0.23 - 2020-06-26 Compare with v1.0.22 Added Add cli ( 2bd8491 by Danil Akhtarov). Add typing ( f066d43 by Danil Akhtarov). Fixed Fix all ( 216c501 by Danil Akhtarov). v1.0.22 - 2020-05-02 Compare with v1.0.21 Added Add dependencies ( 44d6c73 by Danil Akhtarov). Fixed Fix ( d288eaa by Danil Akhtarov). v1.0.21 - 2020-04-16 Compare with v1.0.20 Fixed Fix parse datetime ( a6d3442 by Danil Akhtarov). v1.0.20 - 2020-04-14 Compare with v1.0.19 v1.0.19 - 2020-04-06 Compare with v1.0.18 v1.0.18 - 2020-03-31 Compare with v1.0.17 Changed Change enum name of operationtypewithcommission from buycard to buy_card ( b98f21b by Danil Akhtarov). Fixed Fix class operationtypewithcommission (add buycard operation type) ( 159223c by ddmrtc). Fix readme ( 6e214a2 by Danil Akhtarov). v1.0.17 - 2020-03-23 Compare with v1.0.16 Changed Change pyproject file ( 0b04ea5 by Danil Akhtarov). v1.0.16 - 2020-02-14 Compare with v1.0.15 v1.0.15 - 2020-02-08 Compare with v1.0.14 v1.0.14 - 2020-01-28 Compare with v1.0.13 Fixed Fix ( a85705e by Danil Akhtarov). v1.0.13 - 2020-01-28 Compare with v1.0.12 Added Add tests ( 0bddc7f by Danil Akhtarov). v1.0.12 - 2020-01-23 Compare with v1.0.11 Added Add shields ( a78ab3a by Danil Akhtarov). Fixed Fix sandbox #2 ( e5d6ecf by Danil Akhtarov). Removed Remove python branch 3.8 from travis-ci ( abed358 by Danil Akhtarov). v1.0.11 - 2019-12-30 Compare with v1.0.10 v1.0.10 - 2019-12-29 Compare with first commit Added Add response wrapper ( ccc5e6c by Danil Akhtarov). Add tests ( ffbc9e2 by Danil Akhtarov). Add response model ( 803670a by Danil Akhtarov). Add args ( 49a69b9 by Danil Akhtarov). Add state ( a375ba7 by Danil Akhtarov). Add apis ( 85d7c38 by Danil Akhtarov). Fixed Fix sandbox url ( 86f0da5 by Danil Akhtarov). Removed Remove default value for raise_for_status ( 64ad4d7 by Danil Akhtarov).","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#v302-2021-02-22","text":"Compare with v3.0.1","title":"v3.0.2 - 2021-02-22"},{"location":"CHANGELOG/#added","text":"Add uvloop, orjson ( fd09056 by Danil Akhtarov). Add make instructions ( 259736f by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed","text":"Fix version ( b36f2a5 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v301-2020-12-23","text":"Compare with v3.0.0","title":"v3.0.1 - 2020-12-23"},{"location":"CHANGELOG/#fixed_1","text":"Fix closing a session #153 ( 99b309e by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v300-2020-12-21","text":"Compare with v2.3.3","title":"v3.0.0 - 2020-12-21"},{"location":"CHANGELOG/#added_1","text":"Add customclient example ( 6405467 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#v233-2020-11-18","text":"Compare with v2.3.2","title":"v2.3.3 - 2020-11-18"},{"location":"CHANGELOG/#fixed_2","text":"Fix typing ( bf10ada by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v232-2020-11-18","text":"Compare with v2.3.1","title":"v2.3.2 - 2020-11-18"},{"location":"CHANGELOG/#added_2","text":"Add plotly pandas example ( c3adafe by Danil Akhtarov). Add changelog ( 792307f by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_3","text":"Fix cli portfolio broker_account_id option ( 7265b8b by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v231-2020-11-11","text":"Compare with v2.3.0","title":"v2.3.1 - 2020-11-11"},{"location":"CHANGELOG/#added_3","text":"Add brokeraccountid optional parameter to operationsapi ( 566dbcf by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_4","text":"Fix ( 8d5eae9 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v230-2020-10-16","text":"Compare with v2.2.0","title":"v2.3.0 - 2020-10-16"},{"location":"CHANGELOG/#added_4","text":"Add cli docs ( c100621 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_5","text":"Fix ( 379c508 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v220-2020-10-04","text":"Compare with v2.1.1","title":"v2.2.0 - 2020-10-04"},{"location":"CHANGELOG/#added_5","text":"Add cli ( 04e1162 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_6","text":"Fix travis ( 3f1fa0b by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v211-2020-09-22","text":"Compare with v2.1.0","title":"v2.1.1 - 2020-09-22"},{"location":"CHANGELOG/#added_6","text":"Add tests ( 8a4e5a6 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_7","text":"Fix types ( 149a317 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v210-2020-07-30","text":"Compare with v2.0.0","title":"v2.1.0 - 2020-07-30"},{"location":"CHANGELOG/#added_7","text":"Add tests ( e523c20 by Danil Akhtarov). Add super class for open api ( 7c07724 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_8","text":"Fix readme ( 9e0e0ac by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v200-2020-07-10","text":"Compare with v1.0.24","title":"v2.0.0 - 2020-07-10"},{"location":"CHANGELOG/#v1024-2020-06-26","text":"Compare with v1.0.23","title":"v1.0.24 - 2020-06-26"},{"location":"CHANGELOG/#fixed_9","text":"Fix scripts ( 74de2ce by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v1023-2020-06-26","text":"Compare with v1.0.22","title":"v1.0.23 - 2020-06-26"},{"location":"CHANGELOG/#added_8","text":"Add cli ( 2bd8491 by Danil Akhtarov). Add typing ( f066d43 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_10","text":"Fix all ( 216c501 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v1022-2020-05-02","text":"Compare with v1.0.21","title":"v1.0.22 - 2020-05-02"},{"location":"CHANGELOG/#added_9","text":"Add dependencies ( 44d6c73 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_11","text":"Fix ( d288eaa by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v1021-2020-04-16","text":"Compare with v1.0.20","title":"v1.0.21 - 2020-04-16"},{"location":"CHANGELOG/#fixed_12","text":"Fix parse datetime ( a6d3442 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v1020-2020-04-14","text":"Compare with v1.0.19","title":"v1.0.20 - 2020-04-14"},{"location":"CHANGELOG/#v1019-2020-04-06","text":"Compare with v1.0.18","title":"v1.0.19 - 2020-04-06"},{"location":"CHANGELOG/#v1018-2020-03-31","text":"Compare with v1.0.17","title":"v1.0.18 - 2020-03-31"},{"location":"CHANGELOG/#changed","text":"Change enum name of operationtypewithcommission from buycard to buy_card ( b98f21b by Danil Akhtarov).","title":"Changed"},{"location":"CHANGELOG/#fixed_13","text":"Fix class operationtypewithcommission (add buycard operation type) ( 159223c by ddmrtc). Fix readme ( 6e214a2 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v1017-2020-03-23","text":"Compare with v1.0.16","title":"v1.0.17 - 2020-03-23"},{"location":"CHANGELOG/#changed_1","text":"Change pyproject file ( 0b04ea5 by Danil Akhtarov).","title":"Changed"},{"location":"CHANGELOG/#v1016-2020-02-14","text":"Compare with v1.0.15","title":"v1.0.16 - 2020-02-14"},{"location":"CHANGELOG/#v1015-2020-02-08","text":"Compare with v1.0.14","title":"v1.0.15 - 2020-02-08"},{"location":"CHANGELOG/#v1014-2020-01-28","text":"Compare with v1.0.13","title":"v1.0.14 - 2020-01-28"},{"location":"CHANGELOG/#fixed_14","text":"Fix ( a85705e by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#v1013-2020-01-28","text":"Compare with v1.0.12","title":"v1.0.13 - 2020-01-28"},{"location":"CHANGELOG/#added_10","text":"Add tests ( 0bddc7f by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#v1012-2020-01-23","text":"Compare with v1.0.11","title":"v1.0.12 - 2020-01-23"},{"location":"CHANGELOG/#added_11","text":"Add shields ( a78ab3a by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_15","text":"Fix sandbox #2 ( e5d6ecf by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"Remove python branch 3.8 from travis-ci ( abed358 by Danil Akhtarov).","title":"Removed"},{"location":"CHANGELOG/#v1011-2019-12-30","text":"Compare with v1.0.10","title":"v1.0.11 - 2019-12-30"},{"location":"CHANGELOG/#v1010-2019-12-29","text":"Compare with first commit","title":"v1.0.10 - 2019-12-29"},{"location":"CHANGELOG/#added_12","text":"Add response wrapper ( ccc5e6c by Danil Akhtarov). Add tests ( ffbc9e2 by Danil Akhtarov). Add response model ( 803670a by Danil Akhtarov). Add args ( 49a69b9 by Danil Akhtarov). Add state ( a375ba7 by Danil Akhtarov). Add apis ( 85d7c38 by Danil Akhtarov).","title":"Added"},{"location":"CHANGELOG/#fixed_16","text":"Fix sandbox url ( 86f0da5 by Danil Akhtarov).","title":"Fixed"},{"location":"CHANGELOG/#removed_1","text":"Remove default value for raise_for_status ( 64ad4d7 by Danil Akhtarov).","title":"Removed"},{"location":"cli/","text":"tinvest Usage : $ tinvest [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Application version --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : openapi : CLI for invest-openapi tinvest openapi CLI for invest-openapi Usage : $ tinvest openapi [ OPTIONS ] COMMAND [ ARGS ] ... Options : --token TEXT : [env var: TINVEST_TOKEN; default: ] --sandbox-token TEXT : [env var: TINVEST_SANDBOX_TOKEN; default: ] -s, --use-sandbox : [default: False] --help : Show this message and exit. Commands : accounts market-bonds market-candles market-currencies market-etfs market-orderbook market-search-by-figi market-search-by-ticker market-stocks operations orders orders-cancel orders-limit-order orders-market-order portfolio portfolio-currencies sandbox-clear sandbox-currencies-balance sandbox-positions-balance sandbox-register sandbox-remove tinvest openapi accounts Usage : $ tinvest openapi accounts [ OPTIONS ] Options : --help : Show this message and exit. tinvest openapi market-bonds Usage : $ tinvest openapi market-bonds [ OPTIONS ] Options : --help : Show this message and exit. tinvest openapi market-candles Usage : $ tinvest openapi market-candles [ OPTIONS ] FIGI INTERVAL: [ 1min | 2min | 3min | 5min | 10min | 15min | 30min | hour | day | week | month ] FROM [ TO ] Arguments : FIGI : [required] INTERVAL:[1min|2min|3min|5min|10min|15min|30min|hour|day|week|month] : [required] FROM : Use one of [now, day, week, month, 6month, year] or any date-time format [required] [TO] : Use one of [now, day, week, month, 6month, year] or any date-time format [default: now] Options : --help : Show this message and exit. tinvest openapi market-currencies Usage : $ tinvest openapi market-currencies [ OPTIONS ] Options : --help : Show this message and exit. tinvest openapi market-etfs Usage : $ tinvest openapi market-etfs [ OPTIONS ] Options : --help : Show this message and exit. tinvest openapi market-orderbook Usage : $ tinvest openapi market-orderbook [ OPTIONS ] FIGI DEPTH Arguments : FIGI : [required] DEPTH : [required] Options : --help : Show this message and exit. tinvest openapi market-search-by-figi Usage : $ tinvest openapi market-search-by-figi [ OPTIONS ] FIGI Arguments : FIGI : [required] Options : --help : Show this message and exit. tinvest openapi market-search-by-ticker Usage : $ tinvest openapi market-search-by-ticker [ OPTIONS ] TICKER Arguments : TICKER : [required] Options : --help : Show this message and exit. tinvest openapi market-stocks Usage : $ tinvest openapi market-stocks [ OPTIONS ] Options : --help : Show this message and exit. tinvest openapi operations Usage : $ tinvest openapi operations [ OPTIONS ] FROM [ TO ] Arguments : FROM : Use one of [now, day, week, month, 6month, year] or any date-time format [required] [TO] : Use one of [now, day, week, month, 6month, year] or any date-time format [default: now] Options : --figi TEXT --broker-account-id TEXT --help : Show this message and exit. tinvest openapi orders Usage : $ tinvest openapi orders [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi orders-cancel Usage : $ tinvest openapi orders-cancel [ OPTIONS ] ORDER_ID Arguments : ORDER_ID : [required] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi orders-limit-order Usage : $ tinvest openapi orders-limit-order [ OPTIONS ] FIGI OPERATION: [ Buy | Sell ] LOTS PRICE Arguments : FIGI : [required] OPERATION:[Buy|Sell] : [required] LOTS : [required] PRICE : [required] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi orders-market-order Usage : $ tinvest openapi orders-market-order [ OPTIONS ] FIGI OPERATION: [ Buy | Sell ] LOTS Arguments : FIGI : [required] OPERATION:[Buy|Sell] : [required] LOTS : [required] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi portfolio Usage : $ tinvest openapi portfolio [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi portfolio-currencies Usage : $ tinvest openapi portfolio-currencies [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi sandbox-clear Usage : $ tinvest openapi sandbox-clear [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi sandbox-currencies-balance Usage : $ tinvest openapi sandbox-currencies-balance [ OPTIONS ] BALANCE CURRENCY: [ RUB | USD | EUR | GBP | HKD | CHF | JPY | CNY | TRY ] Arguments : BALANCE : [required] CURRENCY:[RUB|USD|EUR|GBP|HKD|CHF|JPY|CNY|TRY] : [required] Options : --broker-account-id TEXT --help : Show this message and exit. tinvest openapi sandbox-positions-balance Usage : $ tinvest openapi sandbox-positions-balance [ OPTIONS ] BALANCE Arguments : BALANCE : [required] Options : --figi TEXT --broker-account-id TEXT --help : Show this message and exit. tinvest openapi sandbox-register Usage : $ tinvest openapi sandbox-register [ OPTIONS ] BROKER_ACCOUNT_TYPE: [ Tinkoff | TinkoffIis ] Arguments : BROKER_ACCOUNT_TYPE:[Tinkoff|TinkoffIis] : [required] Options : --help : Show this message and exit. tinvest openapi sandbox-remove Usage : $ tinvest openapi sandbox-remove [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"CLI"},{"location":"cli/#tinvest","text":"Usage : $ tinvest [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Application version --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : openapi : CLI for invest-openapi","title":"tinvest"},{"location":"cli/#tinvest-openapi","text":"CLI for invest-openapi Usage : $ tinvest openapi [ OPTIONS ] COMMAND [ ARGS ] ... Options : --token TEXT : [env var: TINVEST_TOKEN; default: ] --sandbox-token TEXT : [env var: TINVEST_SANDBOX_TOKEN; default: ] -s, --use-sandbox : [default: False] --help : Show this message and exit. Commands : accounts market-bonds market-candles market-currencies market-etfs market-orderbook market-search-by-figi market-search-by-ticker market-stocks operations orders orders-cancel orders-limit-order orders-market-order portfolio portfolio-currencies sandbox-clear sandbox-currencies-balance sandbox-positions-balance sandbox-register sandbox-remove","title":"tinvest openapi"},{"location":"cli/#tinvest-openapi-accounts","text":"Usage : $ tinvest openapi accounts [ OPTIONS ] Options : --help : Show this message and exit.","title":"tinvest openapi accounts"},{"location":"cli/#tinvest-openapi-market-bonds","text":"Usage : $ tinvest openapi market-bonds [ OPTIONS ] Options : --help : Show this message and exit.","title":"tinvest openapi market-bonds"},{"location":"cli/#tinvest-openapi-market-candles","text":"Usage : $ tinvest openapi market-candles [ OPTIONS ] FIGI INTERVAL: [ 1min | 2min | 3min | 5min | 10min | 15min | 30min | hour | day | week | month ] FROM [ TO ] Arguments : FIGI : [required] INTERVAL:[1min|2min|3min|5min|10min|15min|30min|hour|day|week|month] : [required] FROM : Use one of [now, day, week, month, 6month, year] or any date-time format [required] [TO] : Use one of [now, day, week, month, 6month, year] or any date-time format [default: now] Options : --help : Show this message and exit.","title":"tinvest openapi market-candles"},{"location":"cli/#tinvest-openapi-market-currencies","text":"Usage : $ tinvest openapi market-currencies [ OPTIONS ] Options : --help : Show this message and exit.","title":"tinvest openapi market-currencies"},{"location":"cli/#tinvest-openapi-market-etfs","text":"Usage : $ tinvest openapi market-etfs [ OPTIONS ] Options : --help : Show this message and exit.","title":"tinvest openapi market-etfs"},{"location":"cli/#tinvest-openapi-market-orderbook","text":"Usage : $ tinvest openapi market-orderbook [ OPTIONS ] FIGI DEPTH Arguments : FIGI : [required] DEPTH : [required] Options : --help : Show this message and exit.","title":"tinvest openapi market-orderbook"},{"location":"cli/#tinvest-openapi-market-search-by-figi","text":"Usage : $ tinvest openapi market-search-by-figi [ OPTIONS ] FIGI Arguments : FIGI : [required] Options : --help : Show this message and exit.","title":"tinvest openapi market-search-by-figi"},{"location":"cli/#tinvest-openapi-market-search-by-ticker","text":"Usage : $ tinvest openapi market-search-by-ticker [ OPTIONS ] TICKER Arguments : TICKER : [required] Options : --help : Show this message and exit.","title":"tinvest openapi market-search-by-ticker"},{"location":"cli/#tinvest-openapi-market-stocks","text":"Usage : $ tinvest openapi market-stocks [ OPTIONS ] Options : --help : Show this message and exit.","title":"tinvest openapi market-stocks"},{"location":"cli/#tinvest-openapi-operations","text":"Usage : $ tinvest openapi operations [ OPTIONS ] FROM [ TO ] Arguments : FROM : Use one of [now, day, week, month, 6month, year] or any date-time format [required] [TO] : Use one of [now, day, week, month, 6month, year] or any date-time format [default: now] Options : --figi TEXT --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi operations"},{"location":"cli/#tinvest-openapi-orders","text":"Usage : $ tinvest openapi orders [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi orders"},{"location":"cli/#tinvest-openapi-orders-cancel","text":"Usage : $ tinvest openapi orders-cancel [ OPTIONS ] ORDER_ID Arguments : ORDER_ID : [required] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi orders-cancel"},{"location":"cli/#tinvest-openapi-orders-limit-order","text":"Usage : $ tinvest openapi orders-limit-order [ OPTIONS ] FIGI OPERATION: [ Buy | Sell ] LOTS PRICE Arguments : FIGI : [required] OPERATION:[Buy|Sell] : [required] LOTS : [required] PRICE : [required] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi orders-limit-order"},{"location":"cli/#tinvest-openapi-orders-market-order","text":"Usage : $ tinvest openapi orders-market-order [ OPTIONS ] FIGI OPERATION: [ Buy | Sell ] LOTS Arguments : FIGI : [required] OPERATION:[Buy|Sell] : [required] LOTS : [required] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi orders-market-order"},{"location":"cli/#tinvest-openapi-portfolio","text":"Usage : $ tinvest openapi portfolio [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi portfolio"},{"location":"cli/#tinvest-openapi-portfolio-currencies","text":"Usage : $ tinvest openapi portfolio-currencies [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi portfolio-currencies"},{"location":"cli/#tinvest-openapi-sandbox-clear","text":"Usage : $ tinvest openapi sandbox-clear [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi sandbox-clear"},{"location":"cli/#tinvest-openapi-sandbox-currencies-balance","text":"Usage : $ tinvest openapi sandbox-currencies-balance [ OPTIONS ] BALANCE CURRENCY: [ RUB | USD | EUR | GBP | HKD | CHF | JPY | CNY | TRY ] Arguments : BALANCE : [required] CURRENCY:[RUB|USD|EUR|GBP|HKD|CHF|JPY|CNY|TRY] : [required] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi sandbox-currencies-balance"},{"location":"cli/#tinvest-openapi-sandbox-positions-balance","text":"Usage : $ tinvest openapi sandbox-positions-balance [ OPTIONS ] BALANCE Arguments : BALANCE : [required] Options : --figi TEXT --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi sandbox-positions-balance"},{"location":"cli/#tinvest-openapi-sandbox-register","text":"Usage : $ tinvest openapi sandbox-register [ OPTIONS ] BROKER_ACCOUNT_TYPE: [ Tinkoff | TinkoffIis ] Arguments : BROKER_ACCOUNT_TYPE:[Tinkoff|TinkoffIis] : [required] Options : --help : Show this message and exit.","title":"tinvest openapi sandbox-register"},{"location":"cli/#tinvest-openapi-sandbox-remove","text":"Usage : $ tinvest openapi sandbox-remove [ OPTIONS ] Options : --broker-account-id TEXT --help : Show this message and exit.","title":"tinvest openapi sandbox-remove"},{"location":"tinvest/clients/","text":"tinvest/clients.py AsyncClient import os from tinvest import AsyncClient TOKEN = os . getenv ( 'TINVEST_SANDBOX_TOKEN' , '' ) async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) ... await client . close () clear_sandbox_account ( self , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . clear_sandbox_account ( broker_account_id ) get_accounts ( self ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_accounts () get_market_bonds ( self ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_bonds () get_market_candles ( self , figi , from_ , to , interval ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_candles ( figi , from_ , to , interval ) get_market_currencies ( self ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_currencies () get_market_etfs ( self ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_etfs () get_market_orderbook ( self , figi , depth ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_orderbook ( figi , depth ) get_market_search_by_figi ( self , figi ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_search_by_figi ( figi ) get_market_search_by_ticker ( self , ticker ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_search_by_ticker ( ticker ) get_market_stocks ( self ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_stocks () get_operations ( self , from_ , to , figi = None , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_operations ( from_ , to , figi , broker_account_id ) get_orders ( self , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_orders ( broker_account_id ) get_portfolio ( self , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_portfolio ( broker_account_id ) get_portfolio_currencies ( self , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_portfolio_currencies ( broker_account_id ) post_orders_cancel ( self , order_id , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . post_orders_cancel ( order_id , broker_account_id ) post_orders_limit_order ( self , figi , body , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = LimitOrderRequest ( lots = 2 , operation = 'Buy' , price = 100.85 , ) await client . post_orders_limit_order ( figi , body , broker_account_id ) post_orders_market_order ( self , figi , body , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = MarketOrderRequest ( lots = 2 , operation = 'Buy' ) await client . post_orders_market_order ( figi , body , broker_account_id ) register_sandbox_account ( self , body ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = SandboxRegisterRequest . tinkoff_iis () await client . register_sandbox_account ( body ) remove_sandbox_account ( self , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . remove_sandbox_account ( broker_account_id ) set_sandbox_currencies_balance ( self , body , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = SandboxSetCurrencyBalanceRequest ( balance = 1000 , currency = 'RUB' , ) await client . set_sandbox_currencies_balance ( body , broker_account_id ) set_sandbox_positions_balance ( self , body , broker_account_id = None ) async async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = SandboxSetPositionBalanceRequest ( balance = 1000 , figi = 'BBG0013HGFT4' , ) await client . set_sandbox_positions_balance ( body , broker_account_id ) SyncClient import os from tinvest import SyncClient TOKEN = os . getenv ( 'TINVEST_SANDBOX_TOKEN' , '' ) def main (): client = SyncClient ( TOKEN , use_sandbox = True ) # SyncClient methods like AsyncClient methods market_bonds = client . get_market_bonds ()","title":"clients.py"},{"location":"tinvest/clients/#tinvestclientspy","text":"","title":"tinvest/clients.py"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient","text":"import os from tinvest import AsyncClient TOKEN = os . getenv ( 'TINVEST_SANDBOX_TOKEN' , '' ) async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) ... await client . close ()","title":"AsyncClient"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.clear_sandbox_account","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . clear_sandbox_account ( broker_account_id )","title":"clear_sandbox_account()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_accounts","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_accounts ()","title":"get_accounts()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_bonds","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_bonds ()","title":"get_market_bonds()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_candles","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_candles ( figi , from_ , to , interval )","title":"get_market_candles()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_currencies","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_currencies ()","title":"get_market_currencies()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_etfs","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_etfs ()","title":"get_market_etfs()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_orderbook","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_orderbook ( figi , depth )","title":"get_market_orderbook()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_search_by_figi","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_search_by_figi ( figi )","title":"get_market_search_by_figi()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_search_by_ticker","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_search_by_ticker ( ticker )","title":"get_market_search_by_ticker()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_market_stocks","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_market_stocks ()","title":"get_market_stocks()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_operations","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_operations ( from_ , to , figi , broker_account_id )","title":"get_operations()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_orders","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_orders ( broker_account_id )","title":"get_orders()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_portfolio","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_portfolio ( broker_account_id )","title":"get_portfolio()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.get_portfolio_currencies","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . get_portfolio_currencies ( broker_account_id )","title":"get_portfolio_currencies()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.post_orders_cancel","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . post_orders_cancel ( order_id , broker_account_id )","title":"post_orders_cancel()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.post_orders_limit_order","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = LimitOrderRequest ( lots = 2 , operation = 'Buy' , price = 100.85 , ) await client . post_orders_limit_order ( figi , body , broker_account_id )","title":"post_orders_limit_order()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.post_orders_market_order","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = MarketOrderRequest ( lots = 2 , operation = 'Buy' ) await client . post_orders_market_order ( figi , body , broker_account_id )","title":"post_orders_market_order()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.register_sandbox_account","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = SandboxRegisterRequest . tinkoff_iis () await client . register_sandbox_account ( body )","title":"register_sandbox_account()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.remove_sandbox_account","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) await client . remove_sandbox_account ( broker_account_id )","title":"remove_sandbox_account()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.set_sandbox_currencies_balance","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = SandboxSetCurrencyBalanceRequest ( balance = 1000 , currency = 'RUB' , ) await client . set_sandbox_currencies_balance ( body , broker_account_id )","title":"set_sandbox_currencies_balance()"},{"location":"tinvest/clients/#tinvest.clients.AsyncClient.set_sandbox_positions_balance","text":"async def main (): client = AsyncClient ( TOKEN , use_sandbox = True ) body = SandboxSetPositionBalanceRequest ( balance = 1000 , figi = 'BBG0013HGFT4' , ) await client . set_sandbox_positions_balance ( body , broker_account_id )","title":"set_sandbox_positions_balance()"},{"location":"tinvest/clients/#tinvest.clients.SyncClient","text":"import os from tinvest import SyncClient TOKEN = os . getenv ( 'TINVEST_SANDBOX_TOKEN' , '' ) def main (): client = SyncClient ( TOKEN , use_sandbox = True ) # SyncClient methods like AsyncClient methods market_bonds = client . get_market_bonds ()","title":"SyncClient"},{"location":"tinvest/streaming/","text":"tinvest/streaming.py Streaming from tinvest import CandleResolution , Streaming async def main (): async with Streaming ( TOKEN ) as streaming : await streaming . candle . subscribe ( 'BBG0013HGFT4' , CandleResolution . min1 ) await streaming . orderbook . subscribe ( 'BBG0013HGFT4' , 5 ) await streaming . instrument_info . subscribe ( 'BBG0013HGFT4' ) async for event in streaming : print ( event ) # responses # tinvest.InstrumentInfoStreamingResponse # tinvest.OrderbookStreamingResponse # tinvest.CandleStreamingResponse # tinvest.ErrorStreamingResponse","title":"streaming.py"},{"location":"tinvest/streaming/#tinveststreamingpy","text":"","title":"tinvest/streaming.py"},{"location":"tinvest/streaming/#tinvest.streaming.Streaming","text":"from tinvest import CandleResolution , Streaming async def main (): async with Streaming ( TOKEN ) as streaming : await streaming . candle . subscribe ( 'BBG0013HGFT4' , CandleResolution . min1 ) await streaming . orderbook . subscribe ( 'BBG0013HGFT4' , 5 ) await streaming . instrument_info . subscribe ( 'BBG0013HGFT4' ) async for event in streaming : print ( event ) # responses # tinvest.InstrumentInfoStreamingResponse # tinvest.OrderbookStreamingResponse # tinvest.CandleStreamingResponse # tinvest.ErrorStreamingResponse","title":"Streaming"}]}